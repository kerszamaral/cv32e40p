#!/usr/bin/env python
from io import TextIOWrapper
import sys

def write_start(file: TextIOWrapper):
    start_string = "memory_initialization_radix=16;\nmemory_initialization_vector=\n"
    file.write(start_string)

def write_end(file: TextIOWrapper, char: str):
    file.seek(file.tell()-2)
    file.write(";")
    
def jump_to_line(file: TextIOWrapper, curr_line: int, next_line: int) -> int:
    separator = "00000000,\n"
    
    if(curr_line < next_line):
        for _ in range(curr_line, next_line):
            file.write(separator)
        return next_line
    
    return curr_line

def get_bytes(line: str) -> list[str]:
    return line.replace("\n", "").split(" ")

def write_bytes(file_out: TextIOWrapper, bytes: list[str]) -> int:
    outLine = ",\n".join(bytes) + ",\n"
    file_out.write(outLine)
    return len(bytes)

def hex_to_coe(in_file: str, out_file: str) -> int:
    current_index = 0
    with open(in_file, "r") as inF:
        with open(out_file, "w") as out:
            write_start(out)
            
            line = inF.readline()
            
            while line:
                if line.startswith("@"):
                    current_index = jump_to_line(out, current_index, eval("0x"+line[1:]))
                else:
                    current_index += write_bytes(out, get_bytes(line))
                line = inF.readline()

            write_end(out, ";")
    
    return current_index

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python3 elf2coe.py <input_file> <output_file>")
    else:
        bytes_written = hex_to_coe(sys.argv[1], sys.argv[2])
        print(f"{bytes_written} bytes written to {sys.argv[2]}")
        print("Done!")